package main

import "strconv"
import "strings"
import "fmt"
import "time"

func createRequestXml(arr AutoGenerated, Type string) string {
	var xml = ""
	if Type == "get" {
		xml = `
		<s:Envelope

		xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"
	
		xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	
		<s:Body>
	
			<n:GetResponse
	
			xmlns:n="urn:MMMS_Request"
	
			xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">`

		for i := 0; i < len(arr.MaterialMovementRequests); i++ {
			xml += `
			<n:v>
				<n:id>` + strconv.Itoa(arr.MaterialMovementRequests[i].ID) + `</n:id>
				<n:stateId>` + strconv.Itoa(arr.MaterialMovementRequests[i].StateID) + `</n:stateId>
				<n:stateName>` + strconv.Itoa(arr.MaterialMovementRequests[i].StateID) + `</n:stateName>
				<n:senderStockId>` + strconv.Itoa(arr.MaterialMovementRequests[i].SenderStockID) + `</n:senderStockId>
				<n:senderStockName>` + strconv.Itoa(arr.MaterialMovementRequests[i].SenderStockID) + `</n:senderStockName>
				<n:receiverStockId>` + strconv.Itoa(arr.MaterialMovementRequests[i].ReceiverStockID) + `</n:receiverStockId>
				<n:createDate>` + arr.MaterialMovementRequests[i].CreateDate + `</n:createDate>
				<n:stateUpdateDate>` + arr.MaterialMovementRequests[i].CreateDate + `</n:stateUpdateDate>
				<n:rejectReasonId>` + arr.MaterialMovementRequests[i].RejectReasonID + `</n:rejectReasonId>
				<n:rejectReasonName>` + arr.MaterialMovementRequests[i].RejectReasonID + `</n:rejectReasonName>
				<n:note>` + arr.MaterialMovementRequests[i].Note + `</n:note>` + buildMaterialInfo(arr.MaterialMovementRequests[i].Materials) + `
			</n:v>`
		}
		xml += `

			</n:GetResponse>

			</s:Body>

		</s:Envelope>`
	} else if Type == "list" {
		xml = `
        <s:Envelope

        xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"
      
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
      
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      
          <s:Body>
      
            <n:GetResponse
      
              xmlns:n="urn:MMMS_Request"
      
              xmlns:xsd="http://www.w3.org/2001/XMLSchema"
      
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">`

		for i := 0; i < len(arr.MaterialMovementRequests); i++ {
			xml += `
			<n:v>
				<n:id>` + strconv.Itoa(arr.MaterialMovementRequests[i].ID) + `</n:id>
				<n:name>` + strconv.Itoa(arr.MaterialMovementRequests[i].SenderStockID) + `</n:name>
				<n:senderStockName>` + strconv.Itoa(arr.MaterialMovementRequests[i].SenderStockID) + `</n:senderStockName>
				<n:stateUpdateDate>` + arr.MaterialMovementRequests[i].CreateDate + `</n:stateUpdateDate>
				<n:stateName_and_UpdateDate>` + strconv.Itoa(arr.MaterialMovementRequests[i].StateID) + ", " + timeToAlmatyTimezone(arr.MaterialMovementRequests[i].CreateDate) + `</n:stateName_and_UpdateDate>
			</n:v>`
		}
		xml += `

			</n:GetResponse>

			</s:Body>

		</s:Envelope>`
	}
	return xml
}

func buildMaterialInfo(arr materials) string {
	var xml = ""
	for i := 0; i < len(arr); i++ {
		xml += `
		<n:materials>
			<n:material_id>` + strconv.Itoa(arr[i].MaterialID) + `</n:material_id>
			<n:material_name>` + arr[i].MaterialName + `</n:material_name>
			<n:unit_name>` + arr[i].MaterialExternalUnitCode + `</n:unit_name>
			<n:volume>` + strconv.Itoa(arr[i].Volume) + `</n:volume>
		</n:materials>`
	}
	return xml
}
func timeToAlmatyTimezone(time2 string) string {
	split := strings.Split(time2, "+")
	hours, err := strconv.Atoi(strings.Split(split[1], ":")[0])
	if err != nil {
		fmt.Println(err)
	}
	minutes, err := strconv.Atoi(strings.Split(split[1], ":")[1])
	if err != nil {
		fmt.Println(err)
	}

	split2 := strings.Split(split[0], "T")
	y := strings.Split(split2[0], "-")[0]
	m := strings.Split(split2[0], "-")[1]
	d := strings.Split(split2[0], "-")[2]
	h := strings.Split(split2[1], ":")[0]
	i := strings.Split(split2[1], ":")[1]
	s := strings.Split(strings.Split(split2[1], ":")[2], ".")[0]

	fmt.Println(hours + minutes)
	t, err := time.Parse("2006-01-02 15:04:05", y+"-"+m+"-"+d+" "+h+":"+i+":"+s)
	if err != nil {
		fmt.Println(err)
	}
	var t1 = t.Add(-(time.Hour*time.Duration(hours) +
		time.Minute*time.Duration(minutes)))
	var t2 = t1.Add(time.Hour * 6)
	fmt.Println(t2.String())

	var split3 = strings.Split(t2.String(), " +")
	// 24.04.2012 00:25:43
	var finalDate = strings.Replace(split3[0], "-", ".", -1)
	return finalDate
}

func createStockXml(arr StockStruct) string {
	var xml = `
    <soapenv:Envelope

xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"

xmlns:xsd="http://www.w3.org/2001/XMLSchema"

xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<soapenv:Body>

  <ns0:GetListResponse

    xmlns:ns0="urn:Get_MMMS_Stock_List"

    xmlns:xsd="http://www.w3.org/2001/XMLSchema"

    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">`

	for i := 0; i < len(arr.Stocks); i++ {
		xml += `
        <ns0:v>
            <ns0:id>` + strconv.Itoa(arr.Stocks[i].Id) + `</ns0:id>
            <ns0:name>` + arr.Stocks[i].Name + `</ns0:name>
        </ns0:v>`
	}

	xml += `

  </ns0:GetListResponse>

</soapenv:Body>

</soapenv:Envelope>`

	return xml
}

func createErrorXml(param string, ExtraException string, errCode string) string {
	if param == "NoConnect" {
		return `
		<s:Envelope
	
		xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">
	
	  <s:Body>
	
		<s:Fault>
	
		  <faultcode>s:Server.userException</faultcode>
	
		  <faultstring>Hobo BFF не удается установить сетевое соединение с сервером СУДМ 10.8.4.244:8010 для вызова GET /api/material-movement/v1.0/stock</faultstring>
	
		</s:Fault>
	
	  </s:Body>
	
	</s:Envelope>
	`
	} else if param == "NoRequest" {
		return `
		<s:Envelope

		xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">
	
	  <s:Body>
	
		<s:Fault>
	
		  <faultcode>s:Server.userException</faultcode>
	
		  <faultstring>Сервер СУДМ 10.8.4.244:8010 не ответил на вызов GET /api/material-movement/v1.0/stock в течение 20 секунд</faultstring>
	
		</s:Fault>
	
	  </s:Body>
	
	</s:Envelope>
	`
	} else if param == "ExtraException" {
		return `
    <s:Envelope

		xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">

	<s:Body>

		<s:Fault>

		<faultcode>s:Server.userException</faultcode>

		<faultstring> Ошибка в методе "/api/hobo-bff/v0.5/MMMS_Stock.GetList": ` + ExtraException + `</faultstring>

		</s:Fault>

	</s:Body>

	</s:Envelope>
`
	} else if param == "NoStocks" {
		return `
		<s:Envelope
	
		xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">
	
	  <s:Body>
	
		<s:Fault>
	
		  <faultcode>s:Server.userException</faultcode>
	
		  <faultstring>От сервера СУДМ 10.8.4.244:8010 на вызов GET /api/material-movement/v1.0/stock получен неожиданный ответ: ` + errCode + `</faultstring>
	
		</s:Fault>
	
	  </s:Body>
	
	</s:Envelope>
		`
	} else if param == "EmptyStocks" {
		return `
    <s:Envelope

    xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">

  <s:Body>

    <s:Fault>

      <faultcode>s:Server.userException</faultcode>

      <faultstring>От сервера СУДМ 10.8.4.244:8010 на вызов GET-метода /api/material-movement/v1.0/stock получен пустой список складов</faultstring>

    </s:Fault>

  </s:Body>

</s:Envelope>
    `
	}
	return "h"
}
